#!/usr/bin/ruby

require 'sinatra/base'
require 'pathname'
require 's3'
require 'httpthumbnailer-client'

$LOAD_PATH.unshift(File.join(File.dirname(__FILE__), '..', 'lib'))
require 'httpimagestore/thumbnail_class'
require 'httpimagestore/pathname'

sinatra = Sinatra.new

sinatra.set :port, 3000
sinatra.set :bind, 'localhost'
sinatra.set :environment, 'production'
sinatra.set :server, ['mongrel']
sinatra.set :lock, true
sinatra.set :logging, true

sinatra.set :s3_key_id, 'AKIAJMUYVYOSACNXLPTQ'
sinatra.set :s3_key_secret, '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'
sinatra.set :s3_bucket, 'rhthumbnails'

sinatra.set :thumbnailer_url, "http://localhost:3100"

class S3Put
	def initialize(key_id, key_secret, bucket, options = {})
		@options = options
		@logger = (options[:logger] or Logger.new('/dev/null'))

		@s3 = S3::Service.new(:access_key_id => key_id, :secret_access_key => key_secret)

		@logger.info "Getting bucket: #{bucket}"
		@bucket = @s3.buckets.find(bucket) or fail "no buckte '#{bucket}' found"
	end

	def put_image(image_path, content_type, data)
		@logger.info "Putting image in bucket '#{@bucket.name}': #{image_path}"

		file = @bucket.objects.build(image_path)
		file.content_type = content_type
		file.content = data
		file.save

		image_path
	end
end

sinatra.before do
	@s3 ||= S3Put.new(settings.s3_key_id, settings.s3_key_secret, settings.s3_bucket, :logger => logger)
	@thumbnailer ||= HTTPThumbnailerClient.new(settings.thumbnailer_url)

	logger.info @thumbnail_classes
	unless @thumbnail_classes
		@thumbnail_classes = []
		@thumbnail_classes << ThumbnailClass.new(:small, 'crop', 128, 128)
		@thumbnail_classes << ThumbnailClass.new(:tiny, 'crop', 32, 32)
	end
	logger.info @thumbnail_classes
end

sinatra.helpers do
	def plain_exception(exception)
		headers "Content-Type" => "text/plain"
		body "Error: #{exception.class.name}: #{exception}\n"
	end
end

sinatra.get '/' do
	"hello"
end

sinatra.put %r{/(.*)} do |image_path|
	tid = Time.new.to_f.to_s
	urls = []

	image = request.body.read
	urls << @s3.put_image(Pathname.new(image_path).original_image(tid).to_s, response.headers['Content-Type'], image)

	tcs = @thumbnail_classes # need local variable for block
	thumbs = @thumbnailer.thumbnail(image) do
		tcs.each do |tc|
			thumbnail tc.method, tc.width, tc.height, tc.format, tc.options
		end
	end

	thumbs.zip(@thumbnail_classes).each do |thumb, thumbnail_class|
		urls << @s3.put_image(Pathname.new(image_path).thumbnail_image(tid, thumbnail_class.name).to_s, thumb.mime_type, thumb.data)
	end

	return urls.join("\n")
end

sinatra.error do
	plain_exception(env['sinatra.error'])
end

sinatra.run!

